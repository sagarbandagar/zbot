# CI/CD Pipeline for ZBot Application
name: ZBot CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  FRONTEND_IMAGE: sagarbandagar/zbot-frontend
  BACKEND_IMAGE: sagarbandagar/zbot-backend

jobs:
  # Frontend Build and Deploy
  frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push frontend
      uses: docker/build-push-action@v4
      with:
        context: ./front-end
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

  # Backend Build and Deploy  
  backend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push backend
      uses: docker/build-push-action@v4
      with:
        context: ./back-end
        push: true
        tags: |
          ${{ env.BACKEND_IMAGE }}:latest
          ${{ env.BACKEND_IMAGE }}:${{ github.sha }}

  # Remote Kubernetes Deployment
  deploy:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add remote host to known_hosts
      run: |
        mkdir -p ~/.ssh
        # Disable strict host key checking for this deployment
        echo "Host ${{ secrets.REMOTE_HOST }}" >> ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
        echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
        chmod 600 ~/.ssh/config

    - name: Test SSH Connection
      run: |
        echo "üîç Testing SSH connection to remote host..."
        ssh -o ConnectTimeout=10 ${{ secrets.SSH_USER }}@${{ secrets.REMOTE_HOST }} "echo 'SSH connection successful!'"

    - name: Deploy to Remote Kubernetes
      run: |
        echo "üöÄ Deploying to remote Kubernetes cluster..."
        
        # Copy deployment files to remote machine
        scp -r k8s/ ${{ secrets.SSH_USER }}@${{ secrets.REMOTE_HOST }}:~/zbot-deploy/
        
        # Execute deployment commands on remote machine
        ssh ${{ secrets.SSH_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
          cd ~/zbot-deploy
          
          # Apply secrets first
          kubectl apply -f k8s/secrets.yaml
          
          # Apply all Kubernetes manifests
          kubectl apply -f k8s/
          
          # Update deployments with new image tags
          kubectl set image deployment/zbot-frontend frontend=${{ env.FRONTEND_IMAGE }}:${{ github.sha }} -n zbot
          kubectl set image deployment/zbot-backend backend=${{ env.BACKEND_IMAGE }}:${{ github.sha }} -n zbot
          
          # Wait for rollout to complete
          kubectl rollout status deployment/zbot-frontend -n zbot --timeout=300s
          kubectl rollout status deployment/zbot-backend -n zbot --timeout=300s
          
          # Show deployment status
          echo "üìä Deployment Status:"
          kubectl get pods -n zbot
          kubectl get svc -n zbot
          
          echo "‚úÖ Deployment completed successfully!"
        EOF